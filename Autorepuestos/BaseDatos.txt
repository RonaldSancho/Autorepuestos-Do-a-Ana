Create database AutoRepuestos;
use AutoRepuestos;

/*********************************************INICIO TABLAS****************************************************************/
Create table Informacion(
IdInformacion int primary key auto_increment,
Nombre varchar(30) not null,
CedulaJuridica varchar(60) not null,
Telefono varchar(30) not null,
Correo varchar(60) not null);

Create table Rol(
IdRol int primary key auto_increment,
NombreRol varchar(20));
insert into Rol(NombreRol) values('Administrador');
insert into Rol(NombreRol) values('Repartidor');

Create table Usuario(
IdUsuario int primary key auto_increment,
NombreUsuario varchar(30) not null,
Apellido1 varchar(20) not null,
IdRol int not null,
Cedula varchar(30) not null,
Telefono varchar(30) not null,
Correo varchar(60) unique not null,
Contrasena varchar(16) not null,
foreign key(IdRol) references Rol(IdRol));
alter table usuario add column Direccion varchar(200);

Create table Proveedor(
IdProveedor int primary key auto_increment,
NombreProveedor varchar(40) not null,
Telefono varchar(30) not null,
Direccion varchar(80) not null);
insert into Proveedor(NombreProveedor,Telefono,Direccion) values('Casa Blanca', '22102222', '250m oeste');
insert into Proveedor(NombreProveedor,Telefono,Direccion) values('Guacamaya', '45588555', '250m oeste');

Create table Categoria(
IdCategoria int primary key auto_increment,
NombreCategoria varchar(30) not null);
insert into Categoria(NombreCategoria) values('Preuba');
insert into Categoria(NombreCategoria) values('Tuercas');
insert into Categoria(NombreCategoria) values('Bujias');

Create table Producto(
IdProducto int primary key auto_increment,
NombreProducto varchar(30) not null,
Descripcion varchar(60) not null,
Precio decimal not null,
IdCategoria int not null,
Existencias int not null,
IdProveedor int not null,
foreign key(IdCategoria) references Categoria(IdCategoria),
foreign key(IdProveedor) references Proveedor(IdProveedor));
alter table Producto add Imagen varchar(100)  ;
insert into Producto(NombreProducto,Descripcion,Precio,IdCategoria,Existencias,IdProveedor,Imagen) values('Bateria','America',25500,1,1,1,'~/template/img/bateria.jpg');
insert into Producto(NombreProducto,Descripcion,Precio,IdCategoria,Existencias,IdProveedor,Imagen) values('Bomba de Agua','Suli',10000,1,1,1,'~/template/img/bombaAgua.jpg');
insert into Producto(NombreProducto,Descripcion,Precio,IdCategoria,Existencias,IdProveedor,Imagen) values('Frenos','Segunda mano',40000,1,1,1,'~/template/img/frenos.jpg');
insert into Producto(NombreProducto,Descripcion,Precio,IdCategoria,Existencias,IdProveedor,Imagen) values('Retrovisor','De f√°brica',12000,1,1,1,'~/template/img/retrovisor.jpg');

Create table TipoPago(
IdTipoPago int primary key auto_increment,
TipoPago varchar(30) not null);
insert into TipoPago(TipoPago) values('Efectivo'),('Tarjeta');

Create table TipodeRetiro(
IdTipoRetiro int primary key auto_increment,
TipoRetiro varchar(30) not null);
insert into TipodeRetiro(TipoRetiro) values('En Tienda'),('Envio');

CREATE TABLE `factura` (
  `IdFactura` int NOT NULL AUTO_INCREMENT,
  `Fecha` date NOT NULL,
  `IdUsuario` int NOT NULL,
  `MontoTotal` decimal(10,0) NOT NULL,
  `Telefono` varchar(30) DEFAULT NULL,
  `Direccion` varchar(200) DEFAULT NULL,
  `IdTipoPago` int DEFAULT NULL,
  `Detalle` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`IdFactura`),
  KEY `IdUsuario` (`IdUsuario`),
  KEY `LlaveTipoPago` (`IdTipoPago`),
  CONSTRAINT `factura_ibfk_1` FOREIGN KEY (`IdUsuario`) REFERENCES `usuario` (`IdUsuario`),
  CONSTRAINT `LlaveTipoPago` FOREIGN KEY (`IdTipoPago`) REFERENCES `tipopago` (`IdTipoPago`)
) ;
alter table Factura add column IdTipoRetiro int;
alter table Factura add constraint LlaveTipoRetiro foreign key(IdTipoRetiro) references TipodeRetiro(IdTipoRetiro);
alter table Factura add column EstadoFactura bit;


Create table Pedidos(
IdPedido int primary key auto_increment,
IdProducto int not null,
Cantidad int not null,
IdProveedor int not null,
PrecioProducto decimal not null,
PrecioTotal decimal not null,
IdUsuario int null,
foreign key(IdProducto) references Producto(IdProducto),
foreign key(IdProveedor) references Proveedor(IdProveedor),
foreign key(IdUsuario) references Usuario(IdUsuario));

Create table Errores(
IdError int primary key auto_increment,
FechaHora datetime,
Codigo varchar(30) not null, 
Mensaje varchar(80) not null,
IdUsuario int not null,
Origen varchar(60) not null,
foreign key(IdUsuario) references Usuario(IdUsuario));

Create table Entregas(
IdEntrega int primary key auto_increment,
Productos varchar(500) not null,
DireccionEntrega varchar(80) not null,
IdUsuario int not null, /*apartir de este dato se debe de jalar la cedula y el telefono*/
Estado varchar(50) not null, /*Pendiente o Realizado*/
foreign key(IdUsuario) references Usuario(IdUsuario));

Create table Bitacora(
IdBitacora int primary key auto_increment,
FechaHora datetime not null,
IdUsuario int not null,
Accion varchar(30) not null, /*ya sea un error al iniciar sesion o que se este devolviendo algun articulo*/
Resultado varchar(30) not null, /*fallo de sesion o devolucion del articulo de forma exitosa*/
foreign key(IdUsuario) references Usuario(IdUsuario));

Create table Carrito(
IdCarrito int primary key not null auto_increment,
IdProducto int not null,
IdUsuario int not null,
Precio decimal not null,
Cantidad int not null,
Subtotal decimal not null,
foreign key(IdProducto) references Producto(IdProducto),
foreign key(IdUsuario) references Usuario(IdUsuario));
alter table Carrito add column Estado bit;

Create table DetalleCarrito(
IdDetalle int primary key not null auto_increment,
IdProducto int not null,
IdUsuario int not null,
Precio decimal not null,
Cantidad int not null,
Subtotal decimal not null,
foreign key(IdProducto) references Producto(IdProducto),
foreign key(IdUsuario) references Usuario(IdUsuario));
ALTER TABLE DetalleCarrito add column Estado bit;

/*----------------------------------------------------------------------------------------------------------------*/
/*-- procedimientos Pedidos-*/
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VisualizarPedido`(id int)
begin
	 SELECT B.NombreProveedor,
			C.NombreProducto,
			A.Cantidad,
			A.PrecioProducto,
			A.PrecioTotal,
			U.NombreUsuario,
            A.IdPedido 'pIdPedido',
            C.IdProducto,
            B.IdProveedor,
            U.IdUsuario
    FROM Pedidos A, Proveedor B, Producto C, Usuario U
	where A.IdProveedor= B.IdProveedor
    AND A.IdProducto = C.IdProducto
    AND A.IdUsuario= U.IdUsuario
    AND A.IdPedido= id;
end$$
DELIMITER ;

call VisualizarPedido(1);
/*----------------------------------------------------------------------------------------------------------------*/

delimiter //
drop procedure VerPedidos ;
delimiter //
create procedure VerPedidos()
begin
	SELECT A.IdPedido 'pIdPedido',
			B.NombreProveedor,
			C.NombreProducto,
			A.Cantidad,
			A.PrecioProducto,
			A.PrecioTotal,
			U.NombreUsuario
    FROM Pedidos A, Proveedor B, Producto C, Usuario U
	where A.IdProveedor= B.IdProveedor
    AND A.IdProducto = C.IdProducto
    AND A.IdUsuario= U.IdUsuario;
end//
delimiter ;
call VerPedidos();

/*----------------------------------------------------------------------------------------------------------------*/
select * from Pedidos
delimiter //
create procedure EliminarPedido(id int)
begin
	Delete from Pedidos where IdPedido = id; 
end//
delimiter ;
call EliminarPedido(3);
select * from Pedidos;

/*----------------------------------------------------------------------------------------------------------------*/

delimiter //
create procedure CrearPedido(IdProducto int,Cantidad int, IdProveedor int, PrecioProducto decimal, PrecioTotal decimal, IdUsuario int)
begin
	Insert into Pedidos(IdProducto,Cantidad,IdProveedor,PrecioProducto,PrecioTotal,IdUsuario) values(IdProducto,Cantidad, IdProveedor, PrecioProducto, PrecioTotal, IdUsuario);
end//
delimiter ;

call CrearPedido(340,1,1,30,1,3000,3000,2);
call CrearPedido(1,1,30,1,3000,3000,2)

/*----------------------------------------------------------------------------------------------------------------*/

delimiter //
create procedure EditarPedido(pIdPedido int, IdProducto int,Cantidad int, IdProveedor int, PrecioProducto decimal, PrecioTotal decimal, IdUsuario int)
begin
	Update Pedidos
    Set IdProducto=IdProducto,
    Cantidad=Cantidad, IdProveedor=IdProveedor, PrecioProducto=PrecioProducto, 
    PrecioTotal=PrecioTotal, IdUsuario=IdUsuario
    where IdPedido=pIdPedido;
end//
delimiter ;
call EditarPedido(100,1,1,60,1,3000,3000,2);

delimiter //
create procedure ConsultaPedidoProducto()
begin
	SELECT IdProducto ,NombreProducto
    from Producto;
end//
delimiter ;

delimiter // 
create procedure ConsultaPedidoProveedor()
begin
	Select IdProveedor, NombreProveedor
    from Proveedor;
end//
delimiter ;

delimiter // 
create procedure ConsultaPedidoUsuario()
begin
	Select IdUsuario, NombreUsuario
    from Usuario;
end//
delimiter ;

/*----------------------------------------------------------------------------------------------------------------*/
/*** SP PARA USUARIOS ***/

delimiter $$
create procedure ValidarUsuario(in pcorreo varchar(60), in pcontrasena varchar(16) )
begin
    select IdUsuario, Correo, IdRol 'pIdRol'
    from Usuario 
    where Correo = pcorreo
    and Contrasena = pcontrasena;
end
$$

DELIMITER $$
CREATE PROCEDURE RegistrarUsuario(in pnombre varchar(30), in papellido1 varchar(20), in pcedula varchar(30),
								  in ptelefono varchar(30), in pcorreo varchar(60), in pcontrasena varchar(16),
                                  in pdireccion varchar(200))
BEGIN
	insert into usuario(NombreUsuario, Apellido1, IdRol, Cedula, Telefono, Correo, Contrasena, Direccion) 
    values ( pnombre, papellido1, 1, pcedula, ptelefono,pcorreo, pcontrasena, pdireccion);
END$$

delimiter $$
create procedure CorreoExistente(in pcorreo varchar(60))
begin
    select IdUsuario, Correo, Contrasena
    from Usuario 
    where Correo = pcorreo;
end
$$

delimiter $$
create procedure RecuperarContrasenna(in pCorreo varchar(60))
begin
    select IdUsuario, Correo 'pCorreo', Contrasena 'pContrasena'
    from Usuario 
    where Correo = pCorreo;
end
$$

delimiter $$
create procedure ConsultarRol()
begin 
select IdRol, NombreRol
from Rol;
end
$$


drop procedure ConsultarRol
update Rol set nombreRol="Cliente" where IdRol=1;
insert into rol(NombreRol) values('Trabajador'),('Admin')
delimiter $$
create procedure CorreoExistente(in pcorreo varchar(60))
begin
    select IdUsuario, Correo, Contrasena
    from Usuario 
    where Correo = pcorreo;
end
$$
delimiter $$
create procedure VerUsuarios()
begin
	select IdUsuario,concat(NombreUsuario,' ',Apellido1) as NombreCompletoUsuario,nombreRol ,Telefono'pTelefono',Correo'pCorreo' from Usuario,Rol where usuario.idRol=Rol.IdRol;
	end;
$$



delimiter //
create procedure ModificarUsuario(IdUsuario int, pIdRol int,pNombre varchar(30), pApellido1 varchar(20), pCedula varchar(30), pTelefono varchar(30), pDireccion varchar(200))
begin
	Update Usuario
    Set 
    IdRol=pIdRol,
    nombreUsuario=pNombre,
    Apellido1=pApellido1,
    Cedula=pCedula,
    telefono=pTelefono,
    Direccion=pDireccion
    where Usuario.IdUsuario=IdUsuario;
end//


/*alter table Producto change Nombre NombreProducto varchar(30) ;
alter table Usuario change Nombre NombreUsuario varchar(30) ;
alter table Proveedor change Nombre NombreProveedor varchar(30) ;

alter table Pedidos modify IdPedido int auto_increment;
alter table Factura modify IdFactura int auto_increment;
alter table Bitacora modify IdBitacora int auto_increment;
alter table Categoria modify IdCategoria int auto_increment;
ALTER TABLE Pedidos DROP FOREIGN KEY pedidos_ibfk_2;
alter table Pedidos drop column IdFactura;
ALTER TABLE Producto DROP FOREIGN KEY producto_ibfk_1;
ALTER TABLE Producto DROP FOREIGN KEY producto_ibfk_2;
alter table Producto add constraint llavecat foreign key(IdCategoria) references Producto(IdCategoria);*/

/*parte de catalogo*/
delimiter $$
create procedure VisualizarCatalogo(in id int)
begin
select A.IdProducto,
A.NombreProducto,
A.Descripcion,
A.Existencias,
C.IdProveedor,
A.Precio,
B.IdCategoria,
A.Imagen
from Producto A,Categoria B,Proveedor C
where A.IdProveedor=C.IdProveedor
and A.IdProducto = id
and A.IdCategoria=B.IdCategoria;
end$$


delimiter $$
create procedure VerCatalogos()
begin
	select 
	IdProducto,NombreProducto,Descripcion,Precio,IdCategoria,IdProveedor,Existencias,Imagen
	from Producto;
	end;
$$

/*********************************************INICIO SP PRODUCTOS****************************************************************/
delimiter $$
CREATE PROCEDURE VerProductos()
BEGIN
	SELECT p.IdProducto 'pIdProducto',
    p.NombreProducto,
    p.Descripcion,
    p.Precio,
    c.nombrecategoria,
    p.existencias,
    pr.nombreproveedor
	FROM producto p, categoria c, proveedor pr
    where p.idcategoria = c.idcategoria and 
          p.idproveedor = pr.idproveedor;

END
$$

DELIMITER $$
create procedure VisualizarProducto(id int)
begin
	 
     SELECT p.IdProducto 'pIdProducto',
    p.NombreProducto,
    p.Descripcion,
    p.Precio,
    c.nombrecategoria,
    p.existencias,
    pr.nombreproveedor
	FROM producto p, categoria c, proveedor pr
    where p.idcategoria = c.idcategoria and 
          p.idproveedor = pr.idproveedor
          AND p.IdProducto= id;
          
end$$

delimiter $$
CREATE PROCEDURE EliminarProducto(in id INT)
BEGIN
	Delete from Producto where IdProducto = id;
END
$$


delimiter $$
CREATE PROCEDURE `EditarProducto`(in pIdProducto INT, in NombreProducto varchar(30),
in Descripcion varchar(60), in Precio decimal(18,0),
in IdCategoria INT, in Existencias INT, in IdProveedor INT,in ImagenN varchar(100))
BEGIN
	   UPDATE Producto
	   SET 
		   
	       NombreProducto = NombreProducto,
		   Descripcion = Descripcion,
	       Precio = Precio,
		   IdCategoria = IdCategoria,
	       Existencias = Existencias,
	       IdProveedor = IdProveedor,
           Imagen=case when ImagenN='' then Imagen else ImagenN end
	 
	   WHERE IdProducto = pIdProducto;
END
$$

delimiter $$
CREATE PROCEDURE `CrearProducto`( in NombreProducto varchar(30),in Descripcion varchar(60),
in Precio decimal(18,0), in IdCategoria INT, in Existencias INT,
in IdProveedor INT,Imagen varchar(100))
begin
	Insert into Producto (NombreProducto, Descripcion, Precio,IdCategoria,
Existencias,IdProveedor,Imagen)
	values(NombreProducto,Descripcion, Precio, IdCategoria, Existencias, IdProveedor,Imagen);
end
$$

       
delimiter $$
create procedure ConsultaProductoCategoria()
begin 
select IdCategoria, NombreCategoria
from Categoria;
end
$$

delimiter $$
create procedure ConsultaProductoProveedor()
begin
select IdProveedor, NombreProveedor
from Proveedor;
end
$$

delimiter $$
create procedure DevolucionProducto(pIdProducto int, Cantidad int)
begin
	Update Producto P set Existencias= Existencias + Cantidad
    where P.IdProducto= pIdProducto;
end
$$

/*********************************************FIN SP PRODUCTOS******************************************************************/

/*********************************************INICIO SP ENTREGAS****************************************************************/
delimiter //
create procedure VerEntregas()
begin
	SELECT e.IdEntrega 'pIdEntrega',
		   e.Productos,
           e.DireccionEntrega,
		   u.Telefono,
           u.Cedula,
           e.Estado,
           u.IdUsuario
	FROM entregas e, usuario u
    WHERE e.IdUsuario= u.IdUsuario;
end//
delimiter ;

delimiter //
create procedure AgregarEntrega(Productos varchar(500),DireccionEntrega varchar(80),IdUsuario int)
begin
	Insert into Entregas(Productos,DireccionEntrega,IdUsuario,Estado) values(Productos,DireccionEntrega,IdUsuario,'Pendiente');
end//
delimiter ;

delimiter // 
create procedure EditarEntrega(pIdEntrega int, Productos varchar(500),DireccionEntrega varchar(80),Estado varchar(50))
begin
	Update Entregas
    Set Productos=Productos,
    DireccionEntrega= DireccionEntrega,
    Estado=Estado
    where IdEntrega=pIdEntrega;
end//
delimiter ;

delimiter // 
create procedure EditarEntregaRepartidor(pIdEntrega int, Estado varchar(50))
begin
	Update Entregas
    Set Estado=Estado
    where IdEntrega=pIdEntrega;
end//
delimiter ;
select * from Entregas
delimiter //
create procedure ConsultarEntrega(id int)
begin
	select e.IdEntrega 'pIdEntrega',
           e.Productos,
           e.DireccionEntrega,
           u.NombreUsuario 'pNombre',
		   u.Telefono,
           u.Cedula,
           e.Estado,
           u.IdUsuario
	FROM entregas e, Producto p, usuario u
    WHERE e.IdUsuario= u.IdUsuario
	AND e.IdEntrega= id;
end//
delimiter ;

delimiter //
create procedure EliminarEntrega(id int)
begin
	Delete from Entregas where IdEntrega = id; 
end//
delimiter ;
/*fin entregas sp*/

/* INICIO SP DE CARRITO */
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ConsultarCarrito` (IdUsuario int)   
BEGIN
	SELECT c.IdCarrito,
		   c.IdProducto,
           p.NombreProducto,
		   c.Precio, 
		   p.Imagen,
           c.Cantidad,
           c.Subtotal,
           c.IdUsuario,
           c.Estado
	FROM Carrito c, producto p
    where p.IdProducto= c.IdProducto
    and c.IdUsuario = IdUsuario
    and c.Estado= 1;
end$$

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `EliminarCarrito` (id INT)   
BEGIN
	DELETE FROM Carrito
	WHERE IdCarrito = id;
END$$

DELIMITER $$
CREATE PROCEDURE `AgregarCarrito`(IdProducto int, Cantidad int, Precio decimal, IdUsuario int)
BEGIN
    IF Cantidad > 0 and (select Existencias from Producto where IdProducto = Producto.IdProducto and Existencias >= Cantidad) then
    INSERT INTO Carrito (IdProducto, Cantidad, Precio, Subtotal, IdUsuario, Estado) VALUES (IdProducto, Cantidad, Precio, (Cantidad*Precio), IdUsuario, 1);
    end if;
END $$

DELIMITER $$
create procedure ProductoCarrito(id int)
begin
     SELECT p.IdProducto,
    p.NombreProducto,
    p.Descripcion,
    p.Precio,
    p.existencias,
    p.Imagen
	FROM producto p
    where  p.IdProducto= id;    
end$$

DELIMITER $$
CREATE PROCEDURE `EditarCarrito`(IdCarrito int, IdProducto int , Cantidad int, Precio int)
begin
 IF Cantidad > 0 and (select Existencias from Producto where IdProducto = Producto.IdProducto and Existencias >= Cantidad) then
	Update Carrito c
    Set c.Cantidad = Cantidad,
    c.Subtotal = (Cantidad*Precio)
    where c.IdCarrito = IdCarrito;
    end if;
end $$
	
CREATE PROCEDURE `MostrarProductoCarrito`(id int)
BEGIN
	SELECT c.IdCarrito,
           p.IdProducto,
		   p.NombreProducto,
           p.Existencias,
           c.Cantidad,
           c.Precio,
           p.Imagen
	FROM Carrito c, producto p
	where c.IdProducto = p.IdProducto and 
    c.IdCarrito= id;
end

delimiter //
CREATE PROCEDURE ConsultaExisteProductoCarrito(id int, IdUsuario int)
BEGIN
	SELECT IdCarrito, Cantidad
	FROM Carrito 
	where Carrito.IdProducto = id
    and Carrito.IdUsuario= IdUsuario;
end
// ;

/*aqui empieza la parte de la verificacion del carrito*/
DELIMITER $$
CREATE PROCEDURE CreandoDetalle()
BEGIN
    INSERT INTO DetalleCarrito (IdProducto, Cantidad, Precio, Subtotal, IdUsuario, Estado) (select IdProducto, Cantidad, Precio, (Cantidad*Precio), IdUsuario, Estado from Carrito);
END$$

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ConsultarDetalle` (IdUsuario int)   
BEGIN
	SELECT c.IdDetalle,
		   c.IdProducto,
           p.NombreProducto,
		   c.Precio, 
		   p.Imagen,
           c.Cantidad,
           c.Subtotal,
           c.IdUsuario,
           c.Estado
	FROM DetalleCarrito c, producto p
    where p.IdProducto= c.IdProducto
    and c.IdUsuario = IdUsuario
    and c.Estado= 1;
end$$
/* FIN SP DE CARRITO */

/*INICIO SP FACTURA*/

delimiter $$
CREATE  PROCEDURE `VerFacturas`()
begin
	select f.IdFactura, f.Fecha, u.NombreUsuario, f.MontoTotal, f.Telefono, f.Direccion, t.TipoPago, r.TipoRetiro, f.Detalle, f.EstadoFactura
    from Factura f, Usuario u, TipoPago t, TipodeRetiro r
    where f.IdUsuario= u.IdUsuario and f.IdTipoPago=t.IdTipoPago
    and f.IdTipoRetiro=r.IdTipoRetiro;
end $$

delimiter $$
CREATE PROCEDURE `CrearFactura`(IdUsuario int, IdTipoPago int, IdTipoRetiro  int)
begin
	insert into Factura(IdUsuario, Telefono, Direccion,Fecha, MontoTotal,IdTipoPago,IdTipoRetiro,EstadoFactura,Detalle) (select d.IdUsuario, u.Telefono, u.Direccion, Now() 'Fecha', (sum(d.Subtotal)) 'MontoTotal', IdTipoPago, IdTipoRetiro, 0,
    (SELECT GROUP_CONCAT('C√≥digo: ', d.IdProducto,'| Producto: ', p.NombreProducto, 
    '| Precio: ',d.Precio,'| Cantidad: ',d.Cantidad SEPARATOR ' ,\n') as nombres_concatenados)
    from DetalleCarrito d, Usuario u, Producto p
    where d.IdUsuario=u.IdUsuario and d.IdUsuario = IdUsuario and d.Estado=1 and
    d.IdProducto = p.IdProducto
    Group by d.IdUsuario, u.Telefono, u.Direccion); 
    Delete from Carrito where Carrito.IdUsuario = IdUsuario;
    Delete from DetalleCarrito where DetalleCarrito.IdUsuario = IdUsuario;
end $$

delimiter $$
create procedure EliminarFactura(IdFactura int)
begin
	Delete from Factura f where f.IdFactura= IdFactura; 
end$$

delimiter $$
CREATE PROCEDURE `VerDetalleFactura`(IdFactura int)
begin
	Select f.IdFactura, u.NombreUsuario, f.Fecha, f.MontoTotal,f.Telefono,f.Direccion, t.TipoPago, r.TipoRetiro, f.Detalle, f.EstadoFactura
    from Factura f, Usuario u, TipoPago t, TipodeRetiro r
    where f.IdUsuario=u.IdUsuario
    and f.IdFactura = IdFactura
    and f.IdTipoPago=t.IdTipoPago
    and f.IdTipoRetiro=r.IdTipoRetiro;
end $$

delimiter $$
create procedure ConsultarTipoPago()
begin
	Select IdTipoPago, TipoPago 
    from TipoPago;
end$$

delimiter $$
create procedure ConsultarTipoRetiro()
begin
	Select IdTipoRetiro, TipoRetiro 
    from TipodeRetiro;
end$$

delimiter $$
create procedure CambiarEstadoFactura(IdFactura int)
begin
	Update Factura set EstadoFactura=(CASE WHEN EstadoFactura = 1 THEN 0 ELSE 1 END)
    where Factura.IdFactura=IdFactura;
end$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `EnviarCorreoConfirmacion`(IdUsuario int,IdTipoPago int,IdTipoRetiro int )
BEGIN
declare maximoIdFactura int;
set maximoIdFactura =( SELECT 
    MAX(IdFactura)
FROM
    factura where Factura.IdUsuario=IdUsuario);

SELECT 
    IdFactura, Fecha, MontoTotal, Correo
FROM
    Factura,
    Usuario
WHERE
    Factura.IdUsuario = IdUsuario
        AND Factura.IdTipoPago = IdTipoPago
        AND Factura.IdTipoRetiro = IdTipoRetiro
        AND factura.IdFactura = maximoIdFactura;
END

/*FIN SP DE FACTURA*/

/*Inicio de Triggers carrito*/
create trigger ActualizarExistenciasProductoInsert after insert on DetalleCarrito for each row
update Producto set Existencias = Existencias - new.Cantidad
where IdProducto = new.IdProducto;

/*FIN TRIGGER DE CARRITO*/